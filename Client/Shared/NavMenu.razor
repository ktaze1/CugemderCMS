@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">CugemderPortal</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="@($"profile/{profileLink}")" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Anasayfa
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="userlist">
                <span class="oi oi-list" aria-hidden="true"></span> Uye Listesi
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="waitinglist">
                <span class="oi oi-list" aria-hidden="true"></span> Bekleme Listesi
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="setting">
                <span class="oi oi-list" aria-hidden="true"></span> Ayarlar
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string profileLink;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
        }

        profileLink = user.FindFirst(c => c.Type == "sub")?.Value.ToString();
    }
}
