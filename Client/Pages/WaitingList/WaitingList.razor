@page "/waitinglist"
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager uriHelper


<p> Grup Atamasi Bekleyen Kullanicilar :</p>

@if (waitingUsers == null)
{
<<<<<<< HEAD

}
else
{

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Uye Adı</th>
                <th>Atanacak Grubu</th>
                <th>Dosyaları</th>
                <th>Kullanıcıyı Sil</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AspNetUsers user in waitingUsers)
            {
                <tr>
                    <td>@user.FirstName @user.SurName</td>
                    <td>
                        <select class="form-control"
                                @bind="user.Group">
                            <option value="0">---Grup Seçin---</option>
                            @foreach (var group in groups)
                            {
                                @if (group.Id == groupId)
                                {
                                    <option selected value="@group.Id">@group.GroupName</option>
                                }
                                else
                                {
                                    <option value="@group.Id">@group.GroupName</option>
                                }

                            }
                        </select>
                    </td>
                    <td>
                        @if (uploads == null)
                        {
                            <p> ... </p>
                        }
                        else
                        {

                            var test = uploads.Where(x => x.UserId == user.Id)
                                            .ToList();

                            foreach (Uploads item in test)
                            {
                                <a href="/UploadedContent/@item.FileName" data- download="@user.FirstName @user.SurName">Indir</a>
                            }
                        }

                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(user.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>



    @if (waitingUsers.Length > 0)
    {
        <button type="submit" @onclick="@( () => Update())"> Guncelle </button>
    }
=======
    <p> Yukleniyor</p>
}
else
{
    <WaitingListForm waitingUsers="@waitingUsers" ButtonText="Guncelle" OnValidSubmit="@Update" />
>>>>>>> f41ce94f043252d99b1e2679810c59dda6db057e
}

@code {
    AspNetUsers[] waitingUsers;
    public int groupId = 0;
    private List<Groups> groups = new List<Groups>();
<<<<<<< HEAD
    private List<Uploads> uploads;
    private List<Points> points;
=======
>>>>>>> f41ce94f043252d99b1e2679810c59dda6db057e

    protected override async Task OnInitializedAsync()
    {
        waitingUsers = await http.GetFromJsonAsync<AspNetUsers[]>("api/AspNetUsers/noGroup");
        groups = await http.GetFromJsonAsync<List<Groups>>("api/groups");
<<<<<<< HEAD
        uploads = await http.GetFromJsonAsync<List<Uploads>>("api/Uploads");
        points = await http.GetFromJsonAsync<List<Points>>("api/Points");


        foreach (var user in waitingUsers)
        {
            user.Points = points.Where(x => x.UserId == user.Id).FirstOrDefault().Id;
        }

=======
>>>>>>> f41ce94f043252d99b1e2679810c59dda6db057e
    }

    async void Update()
    {
        foreach (AspNetUsers user in waitingUsers)
        {
<<<<<<< HEAD
            await http.PutAsJsonAsync($"api/AspNetUsers/newGroup/{user.Id}", user);
        }
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        OnInitialized();
    }

    async Task Delete(string userId)
    {
        var user = waitingUsers.First(x => x.Id == userId);
        if (await js.InvokeAsync<bool>("confirm", $"Bu işlemden emin misiniz?"))
        {
            await http.DeleteAsync($"api/Points/{userId}");
            await http.DeleteAsync($"api/Uploads/{userId}");
            await http.DeleteAsync($"api/AspNetUsers/{userId}");
        }
=======
           await http.PutAsJsonAsync($"api/AspNetUsers/newGroup/{user.Id}", user);
        }

        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        uriHelper.NavigateTo("admincontrols", true);
>>>>>>> f41ce94f043252d99b1e2679810c59dda6db057e
    }
}