@page "/claims"
@page "/"
@inject HttpClient http
@*@inject AuthenticationStateProvider AuthenticationStateProvider
    @using System.Security.Claims
    @inject HttpClient http*@

@if (roles == null)
{
    <p> Loading</p>
}
else
{

    @foreach (var role in roles)
    {
        @role
    }
}



<!--<-->@*h3>ClaimsPrincipal Data</h3>

    <p>@_authMessage</p>

    @if (_claims.Count() > 0)
    {
        <table class="table">
            @foreach (var claim in _claims)
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
        </table>
    }

    <p>@_userId</p>*@

@code {

            string[] roles;

    protected override async Task OnInitializedAsync()
        {
            roles = await http.GetFromJsonAsync<string[]>("roles");
        }


    //private string _authMessage;
    //private string _userId;
    //private AspNetUsers _username;
    //private string name;
    //private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    //protected override async Task OnParametersSetAsync()
    //{
    //    await GetClaimsPrincipalData();
    //    await base.OnParametersSetAsync();
    //}

    //private async Task GetClaimsPrincipalData()
    //{
    //    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //    var user = authState.User;

    //    if (user.Identity.IsAuthenticated)
    //    {
    //        _authMessage = $"{user.Identity.Name} is authenticated.";
    //        _claims = user.Claims;
    //        _userId = $"User Id: {user.FindFirst(c => c.Type == "sub")?.Value}";

    //        _username = await http.GetFromJsonAsync<AspNetUsers>($"api/AspNetUsers/username/{_userId}");

    //        name = _username.FirstName + ' ' + _username.SurName;
    //    }
    //    else
    //    {
    //        _authMessage = "The user is NOT authenticated.";
    //    }
    //}
}