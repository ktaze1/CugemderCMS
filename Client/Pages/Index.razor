@*@page "/claims"
    @page "/"

    @*h3>ClaimsPrincipal Data</h3>

        <p>@_authMessage</p>

        @if (_claims.Count() > 0)
        {
            <table class="table">
                @foreach (var claim in _claims)
                {
                    <tr>
                        <td>@claim.Type</td>
                        <td>@claim.Value</td>
                    </tr>
                }
            </table>
        }

        <p>@_userId</p>*@



@* @code {

        AspNetUsers[] waitingUsers;

        protected override async Task OnInitializedAsync()
        {
            waitingUsers = await http.GetFromJsonAsync<AspNetUsers[]>("api/AspNetUsers/Group");
            await Test();
        }


        async Task Test()
        {
            foreach (var item in waitingUsers)
            {
                await http.PostAsJsonAsync<AspNetUsers>("AddNewRole", item);
            }
        }

        //private string _authMessage;
        //private string _userId;
        //private AspNetUsers _username;
        //private string name;
        //private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

        //protected override async Task OnParametersSetAsync()
        //{
        //    await GetClaimsPrincipalData();
        //    await base.OnParametersSetAsync();
        //}

        //private async Task GetClaimsPrincipalData()
        //{
        //    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //    var user = authState.User;

        //    if (user.Identity.IsAuthenticated)
        //    {
        //        _authMessage = $"{user.Identity.Name} is authenticated.";
        //        _claims = user.Claims;
        //        _userId = $"User Id: {user.FindFirst(c => c.Type == "sub")?.Value}";

        //        _username = await http.GetFromJsonAsync<AspNetUsers>($"api/AspNetUsers/username/{_userId}");

        //        name = _username.FirstName + ' ' + _username.SurName;
        //    }
        //    else
        //    {
        //        _authMessage = "The user is NOT authenticated.";
        //    }
        //}
    }--> *@





@page "/admincontrols"
@inject HttpClient http

<div class="container">
    <div class="row">
        <div class="col">
            <CugemderPortal.Client.Pages.GroupFolder.GroupsCreate />
        </div>
    </div>

    <br />
</div>



@code{

    private AspNetUsers[] usersNoRole;

    protected override async Task OnInitializedAsync()
    {
        usersNoRole = await http.GetFromJsonAsync<AspNetUsers[]>("api/AspNetUsers/Group");

        await http.PostAsJsonAsync("/AddNewRole", usersNoRole);
    }

}